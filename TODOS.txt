================= Mar, Fri 5, 2021 =================
Farmers-company
1. Create a new Visual Studio Project. This project should be named: "farm_company_v1"
	The system must include the following clases. This is not a final version, you are going to need
	to implement your own changes.
		1. Farmer
			Name
			Stratum
			Gender
		2. Product
			Name// (e.g. potatoes, tomatoes... etc)
			UnitPrice //lb
			UnitPerKilometer
			CropExtensionKms
			TaxPerUnitPercentage //Tax per each produced crop unit.
		3. Crop
			Product (instance of the Product class)
			Extension //km.

There is a company that buys the farmers' production. The Company makes a discount on the
total amount of the sale, this discount is regarding the taxes.
This company offers some aids over the taxes to the farmers under the following restrictions:
	1. If the farmer is a woman (the company gives and aid of 50% of the taxes costs).
		(e.g). See attached document. "TODOS/Farmer-company/Farmer-company-sample.xlsx"

Additional restrictions:
	1. One single farmer might have more than 1 crop. (e.g. Farmer Pepito, has 3 crops: (tomatoes, strawberries, pinapple))
	2. The Farmers' Company buys the crop production to a wide variety of farmers.

The Farmers' Company has hired you to develop a software that must include the following functionalities:
	1. How much money must be pay to a farmer who wants to sell many different products crops.
	2. Total of money that must be pay to the entire set of farmers.
	3. General information regarding the sell with the lowest price. (e.g.) check attached sample document.

Constraints
	1. The code must be uploaded to git hub in a repository named: "farm_company_v1".
	2. Deadline: Mar, Fri 5, 2021.
	3. This project must be developed individually.
	4. The student should create at least 
		- 5 farmers
		- 7 crops
		- 5 sales
	5. Project working screenshots must be uploaded to GitHub. One screenshot for every requirement 
	   (In this case 3 screenshots)

=============================== Mar, 19, 2021 ===============================
Create new project
	Sales
		classes:
			SalesMan/Seller
				Name
				Age
			Product
				Name
				Price
			Sale
				Product
				Seller
				Comments
		
		Create at least 3 objects/instances out of each class
		Calculate sales total amount
			E.G. 
				v1 = 500
				v2 = 300
				v3 = 150
				
			Sales total amount: 950

	Sales systems reports:
		1. Who's the seller (sales man name), who has sold the cheapest product.
		2. Products price average.
		3. How many unit of the product has been sold.
			Shoes: 4 units
			Tshirts: 13 units
		4. What's the most expensive product.

	Constraints:
		1. Individual
		2. New gitHub project "sales-system"
		3. Application working screenshots must be attached. A single screenshot for any new requirement.
		4. Arrays must be applied to code the solution.

================= Mar, Fri 26, 2021 =================
Operations with lists (using lists and nodes as we covered in class)
Create any class representation (e.g.: Appointment (day, time...), e.g. (Product: name, price). Create a product or appointment class is banned.
Creat a program with the following operations, according with the operations we studied in class:
1. Add
2. Print
3. Given an element (insert) and a reference element (after), the "insert" should be inserted after the "after" element.
  (e.g)
  Insert new element				
		original list				
		1	2	7	9	
		
		insert	5	
		after	7	
		
		result list				
		1	2	7	5	9
		
Constraints:
		1. Individual
		2. New gitHub project "list-basic-operations"
		3. Application working screenshots must be attached. A single screenshot for any new requirement.
		4. don't use arrays
		5. Use list (as we covered in class)
		6. Create your own node class as we did in class
		7. Create your own list class as we did in class
		8. Don't use native "List" class. (e.g.) List c#.
		9. Create example data (objects) (as well as we did in class)

================= Apr, Fri 09, 2021 =================
1. Create a "Store system"
2. Create new GitHub repository "store-system-list"
3. the system should have a list of "Products"
4. the system should have a list of "Clients"
5. the system should have a list of "Sales". Each sale has 1 customer and many products (list)
6. Calculations:
	6.1 Total amount of sales
	6.2. Customer name who has made the biggest purchase.
	6.3. Product that is getting more sales
	6.4. Sales average
	6.5. Products stock: Inform existences for each product
	6.6. Insert and delete customers
	6.7. Insert and delete products
	6.8. Create new sales (the amount of products must be taken into account)
	

Constraints:
1. Do not use out of the box lists. Do not use the "List" class.
2. Individually
3. Screenshots must be attached.


=============================== Schedule ===============================
Grade 1: April 10: 60%
Grade 2: May 22: 40%
